struct node
{
    int l;
    int r;
    int sz;
    int pr;
    int v;
    node(int pp)
    {
        l = -1;
        r = -1;
        sz = 0;
        pr = gen();
        v = pp;
    }
};

vector <node> T;
int root = -1;

void update(int t)
{
    if (t == -1) return;
    int pepe = 0;
    if (T[t].l > -1)
    {
        pepe += T[T[t].l].sz + 1;
    }
    if (T[t].r > -1)
    {
        pepe += T[T[t].r].sz + 1;
    }
    T[t].sz = pepe;
    return;
}

pair <int, int> split(int t, int x)
{
    if (t == -1)
    {
        return {-1, -1};
    }
    int r = 0;
    if (T[t].l > -1)
    {
        r = T[T[t].l].sz + 1;
    }
    pair <int, int> pp;
    if (r > x)
    {
        pp = split(T[t].l, x);
        T[t].l = pp.S;
        update(t);
        update(pp.F);
        return {pp.F, t};
    }
    else
    {
        pp = split(T[t].r, x - r - 1);
        T[t].r = pp.F;
        update(t);
        update(pp.S);
        return {t, pp.S};
    }
}

int merg(int l, int r)
{
    if (l == -1)
    {
        return r;
    }
    if (r == -1)
    {
        return l;
    }
    if (T[l].pr > T[r].pr)
    {
        T[l].r = merg(T[l].r, r);
        update(l);
        return l;
    }
    else
    {
        T[r].l = merg(l, T[r].l);
        update(r);
        return r;
    }
}
